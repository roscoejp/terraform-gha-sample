name: "Terraform Apply"

on:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  TF_ROOT_DIR: "./"
  TF_VERSION: "1.2.3"
  PR_NUMBER: ${{ github.event.number }}

jobs:
  terraform:
    if: github.event.pull_request.merged == true  # Limit to PRs that are merged and closed
    name: Terraform Apply
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.TF_ROOT_DIR }}
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Init
        id: init
        run: terraform init

      - name: Download Plan Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: terraform-plan.yml
          pr: ${{ env.PR_NUMBER }}
          name: ${{ env.PR_NUMBER }}-tfplan

      - name: Apply
        id: apply
        run: terraform apply -input=false -no-color tfplan

      - name: Comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Apply')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Apply

            > ðŸ’¡ Merge triggered by @${{ github.triggering_actor }}. [Link to the run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            <details><summary>Output</summary>
            
            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_ROOT_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
