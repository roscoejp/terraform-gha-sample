name: Reusable Terraform apply

on:
  workflow_call:
    inputs:
      tf_root_dir:
        description: "The root directory of the Terraform code to run"
        required: false
        type: string
        default: "./"
      tf_version:
        description: "The Terraform version to run"
        required: false
        type: string
        default: "1.2.3"
      pr_number:
        description: "The Pull Request number to run the Terraform plan against"
        required: true
        type: string
    outputs: # Map the workflow outputs to job outputs
      apply_outcome:
        description: "Outcome of the Terraform apply command"
        value: ${{ jobs.terraform.outputs.apply_outcome }}
      apply_stdout:
        description: "STDOUT of the Terraform apply command"
        value: ${{ jobs.terraform.outputs.apply_stdout }}

jobs:
  start:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      comment-id: ${{ steps.update_comment.outputs.comment-id }}
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ inputs.pr_number }}
          comment-author: 'github-actions[bot]'
          body-includes: Comment by GHA Apply Automation

      - name: Create or update comment
        id: update_comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ inputs.pr_number }}
          body: |
            <sub>*Comment by GHA Apply Automation. Do not remove.*</sub>
            <sub>*Push Author: @${{ github.actor }}, Triggering Action: `${{ github.event_name }}`, Working Directory: `${{ inputs.tf_root_dir }}`, Workflow Name: `${{ github.workflow }}`*</sub>
            Running Terraform Apply via automation. [Link to the run (valid for 90 days by default)](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace
  
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.tf_root_dir }}
    permissions:
      contents: read
      pull-requests: write
    outputs: # Map the job outputs to step outputs
      apply_outcome: ${{ steps.apply.outcome }}
      apply_stdout: ${{ steps.apply.stdout }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Download Plan Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: terraform-plan.yml
          pr: ${{ inputs.pr_number }}
          name: ${{ inputs.pr_number }}-tfplan.zip
          use_unzip: true

      - name: Apply
        id: apply
        run: terraform apply -input=false -no-color tfplan
        continue-on-error: true
 
  end:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Create or update comment
        id: update_comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ needs.start.outputs.comment-id }}
          issue-number: ${{ inputs.pr_number }}
          body: |
            Terraform Apply: `${{ needs.terraform.outputs.apply_outcome }}`

            <details><summary>Show Apply Output</summary>

            ```terraform
            ${{ needs.terraform.outputs.apply_stdout }}
            ```

            </details>

            <sub>Issue comments created by [create-or-update-comment](https://github.com/peter-evans/create-or-update-comment)</sub>
          edit-mode: append
      
      - name: Fail workflow on apply failure/skip
        if: needs.terraform.outputs.apply_outcome != 'success'
        run: |
          exit 1
